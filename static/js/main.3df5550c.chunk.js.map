{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Calculator","props","state","width","height","flute_direction","handleChange","bind","calculateYield","name","value","this","setState","sheet_size_width","sheet_size_height","width_rotate","height_rotate","total_yield_rotate","Math","floor","total_yield","eighteen_hundred_yield","nine_hundred_yield","twentyfour_hundred_yield","class","onSubmit","handleSubmit","type","onChange","e","target","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3df5550c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 0,\n      height: 0,\n      flute_direction: 'Not Important',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.calculateYield = this.calculateYield.bind(this);\n  }\n\n  handleChange(name, value) {\n    switch (name) {\n      case 'width':\n        this.setState({width: value});\n        break;\n      case 'height':\n        this.setState({height: value});\n        break;\n      case 'flute_direction':\n        this.setState({flute_direction: value});\n      default:\n        break;\n    }\n  }\n\n  calculateYield(sheet_size_width, sheet_size_height) {\n    var width = this.state.width;\n    var height = this.state.height;\n    var flute_direction = this.state.flute_direction;\n\n    switch(flute_direction) {\n      case 'Not Important':\n        if(width && height > 0) {\n          var width_rotate = height;\n          var height_rotate = width;\n          var height_yield_swap = Math.floor(sheet_size_height/height_rotate);\n          var width_yield_swap = Math.floor(sheet_size_width/width_rotate);\n          var total_yield_rotate = height_yield_swap * width_yield_swap;\n\n          var height_yield = Math.floor(sheet_size_height/height);\n          var width_yield = Math.floor(sheet_size_width/width);\n          var total_yield = height_yield * width_yield;\n\n          if (total_yield_rotate > total_yield) {\n            return total_yield_rotate;\n          } else {\n            return total_yield;\n          }\n\n        }\n      case 'Horizontal':\n        if(width && height > 0) {\n          var width_rotate = height;\n          var height_rotate = width;\n          var height_yield = Math.floor(sheet_size_height/height_rotate);\n          var width_yield = Math.floor(sheet_size_width/width_rotate);\n          return height_yield * width_yield;\n        }\n        break;\n      case 'Vertical':\n        if(width && height > 0) {\n          var height_yield = Math.floor(sheet_size_height/height);\n          var width_yield = Math.floor(sheet_size_width/width);\n          return height_yield * width_yield;\n        }\n        break;\n      default:\n        break;\n    }\n    return 0;\n  }\n\n  // isLandscape() {\n  //   var width = this.state.width;\n  //   var height = this.state.height;\n  //   if (width > height) {\n  //     return true;\n  //   } else {\n  //     return false;\n  //   }\n  // }\n\n\n\n\n  render() {\n    var width = this.state.width;\n    var height = this.state.height;\n    var flute_direction = this.state.flute_direction;\n    var eighteen_hundred_yield = this.calculateYield(1200, 1800);\n    var nine_hundred_yield = this.calculateYield(900, 2400);\n    var twentyfour_hundred_yield = this.calculateYield(1200, 2400);\n    return (\n      <div class=\"container\">\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Width\n            <input type=\"number\" name=\"width\" value={this.state.width} onChange={e => this.handleChange(e.target.name, e.target.value)}/>\n          </label>\n          <label>\n            Height\n            <input type=\"number\" name=\"height\" value={this.state.height} onChange={e => this.handleChange(e.target.name, e.target.value)}/>\n          </label>\n          <label>\n            Flute Direction\n            <select value={this.state.flute_direction} name=\"flute_direction\" onChange={e => this.handleChange(e.target.name, e.target.value)}>\n              <option value=\"Not Important\">Not Important</option>\n              <option value=\"Horizontal\">Horizontal</option>\n              <option value=\"Vertical\">Vertical</option>\n            </select>\n          </label>\n        </form>\n        <div class=\"artwork-info\">\n          Width: {width}\n          <br/>\n          Height: {height}\n          <br/>\n          Flute Direction: {flute_direction}\n        </div>\n        <div class=\"sheet-info\">\n          Sheet Size: 1830x1220\n          <br/>\n          Greatest Yield: {eighteen_hundred_yield}\n          <br/>\n        </div>\n        <div class=\"sheet-info\">\n          Sheet Size: 920x2420\n          <br/>\n          Greatest Yield: {nine_hundred_yield}\n          <br/>\n        </div>\n        <div class=\"sheet-info\">\n          Sheet Size: 1220x2420\n          <br/>\n          Greatest Yield: {twentyfour_hundred_yield}\n          <br/>\n        </div>\n      </div>\n\n      )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}